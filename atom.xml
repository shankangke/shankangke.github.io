<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>柯善康的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.shankangke.com/"/>
  <updated>2018-08-21T16:31:54.770Z</updated>
  <id>https://www.shankangke.com/</id>
  
  <author>
    <name>Shankang Ke</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 Hexo + GitHub 建立这个博客网站 免费博客网站建立教程</title>
    <link href="https://www.shankangke.com/set-up-this-blog.html"/>
    <id>https://www.shankangke.com/set-up-this-blog.html</id>
    <published>2018-08-09T09:38:58.000Z</published>
    <updated>2018-08-21T16:31:54.770Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我的这个<a href="https://www.shankangke.com/">“柯善康的博客”</a>是部署在 GitHub 上，托管在 GitHub Pages 上，通过 Hexo 程序生成静态文件。日常管理采用 Git 版本控制，也不必担心写废。</p><p>GitHub 的公开库是免费的， GitHub Pages 也免费提供二级域名，并且支持 SSL 部署。如果你不使用自己的独立域名，完全可以做到0成本运行一个博客。</p><h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><p>小小白们可以先去了解一下：</p><ul><li>Git</li><li>GitHub</li><li>GitHub Pages</li><li>Hexo</li><li>Markdown</li></ul><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>关于 Git ，这里有一些资源：</p><ul><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git 网站</a></li><li><a href="https://git-scm.com/book/zh/" target="_blank" rel="noopener">Git 中文书籍</a></li><li><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="noopener">Git 简明指南</a></li></ul><p>采用 GitHub 部署博客，只需简单了解Git即可。</p><h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><p><a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> 是一个网站、远程仓库，用于托管 Git 仓库，今年6月被微软收购，截至本文发布时公开库仍然免费。我们部署博客不需要对 GitHub 了解太多。</p><h3 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h3><p>GitHub 上的库可以免费托管在 GitHub Pages 上，我们只需了解怎么操作即可。</p><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>Hexo 是一个使用 Node.js 编写的博客框架，简单、快速、高效、可扩展性强。</p><p>由于生成静态文件，所以通常情况下只要托管文件的服务器不出问题，就不存在安全问题。</p><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo 中文网站</a></p><h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><p>Markdown 是一种轻量级标记语言， Hexo 支持 Markdown 语法。关于 Markdown 的详细资料可以自行查询，我们这里只需要掌握如何使用 Markdown 即可。</p><p>这里有一些 Markdown 学习资源：</p><ul><li><a href="https://www.appinn.com/markdown/" target="_blank" rel="noopener">Markdown 语法说明(简体中文版)</a></li><li><a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">Markdown - 中文维基百科</a></li><li><a href="https://www.jianshu.com/p/q81RER" target="_blank" rel="noopener">献给写作者的 Markdown 新手指南 - 简书</a></li><li><a href="https://www.markdownguide.org/" target="_blank" rel="noopener">Markdown Guide</a></li></ul><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><h3 id="Git-1"><a href="#Git-1" class="headerlink" title="Git"></a>Git</h3><h4 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h4><p>一般情况下， Windows 系统直接下载 Git 安装包即可： <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git 官网下载</a></p><h4 id="配置-Git"><a href="#配置-Git" class="headerlink" title="配置 Git"></a>配置 Git</h4><p>安装完 Git 之后，需要配置用户名和邮箱地址，因为 Git 提交需要这些信息，且这些信息会写入提交无法更改。</p><p>使用以下命令配置用户名和邮箱地址（把<code>example_username</code>替换为你的用户名、把<a href="mailto:`example_email@example.com" target="_blank" rel="noopener">`example_email@example.com</a>`替换为你的邮箱地址）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;example_username&quot;</span><br><span class="line">git config --global user.email &quot;example_email@example.com&quot;</span><br></pre></td></tr></table></figure><h3 id="GitHub-1"><a href="#GitHub-1" class="headerlink" title="GitHub"></a>GitHub</h3><h4 id="创建-GitHub-账户"><a href="#创建-GitHub-账户" class="headerlink" title="创建 GitHub 账户"></a>创建 GitHub 账户</h4><p>打开 <a href="https://github.com/" target="_blank" rel="noopener">GitHub 官网</a>，注册就不用细说了吧～</p><h4 id="创建-GitHub-Pages-仓库"><a href="#创建-GitHub-Pages-仓库" class="headerlink" title="创建 GitHub Pages 仓库"></a>创建 GitHub Pages 仓库</h4><p>要想使用 GitHub Pages ，需要创建对应的仓库。仓库不对应则无法使用。</p><p>GitHub Pages 有两种类型：</p><ol><li>User/Organization Pages</li><li>Project Pages</li></ol><p>两种类型的具体区别可以查看官方文档： <a href="https://help.github.com/articles/user-organization-and-project-pages/" target="_blank" rel="noopener">User, Organization, and Project Pages</a></p><p>简单介绍一下区别：</p><ul><li>User/Organization Pages 的源文件在<code>master</code>分支； Project Pages 的源文件在<code>gh-pages</code>分支。</li><li>User/Organization Pages 通过<code>http(s)://&lt;username/orgname&gt;.github.io</code>访问； Project Pages 通过<code>http(s)://&lt;username/orgname&gt;.github.io/&lt;projectname&gt;</code>访问。</li><li>User/Organization Pages 的仓库名称必须为<code>&lt;username/orgname&gt;.github.io</code>； Project Pages 的仓库名称没有特殊要求。</li><li>一个账户只能有一个 User/Organization Pages ，但却可以有很多 Project Pages 。</li></ul><p>这里我直接使用了 User Pages ，创建一个名为<code>shankangke.github.io</code>的仓库。</p><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><h4 id="nvm-安装-建议非-Windows-用户使用"><a href="#nvm-安装-建议非-Windows-用户使用" class="headerlink" title="nvm 安装(建议非 Windows 用户使用)"></a>nvm 安装(建议非 Windows 用户使用)</h4><p>安装 Node.js 的最佳方式是使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a></p><p>cURL 和 Wget 方式<strong>任选一种</strong>即可。</p><p>cURL:<code>curl https://raw.github.com/creationix/nvm/master/install.sh | sh</code></p><p>Wget:<code>wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</code></p><p>执行完成后，<strong>重启终端</strong>再执行该命令来安装 Node.js 稳定版:<code>nvm install stable</code></p><h4 id="安装包安装-建议-Windows-用户使用"><a href="#安装包安装-建议-Windows-用户使用" class="headerlink" title="安装包安装(建议 Windows 用户使用)"></a>安装包安装(建议 Windows 用户使用)</h4><p>*Windows 用户安装 Git 时会安装 Git Bash 。 Git Bash 提供了 Linux 风格的 shell ，所以可以直接用上面提到的命令通过 nvm 来安装 Node.js 。由于 Hexo 的很多操作都涉及到命令行，可以考虑始终使用 Git Bash 来进行操作。在任意位置单击右键，选择<code>Git Bash Here</code>即可打开 Git Bash 。</p><p>通过 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js 官网</a>下载安装包，运行即可安装。<strong>安装时，请勾选<code>Add to PATH</code>选项。</strong></p><h3 id="Hexo-1"><a href="#Hexo-1" class="headerlink" title="Hexo"></a>Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo 。</p><p>命令:<code>npm install -g hexo-cli</code></p><p>安装 Hexo 完成后，请执行下列命令， Hexo 将会在指定的文件夹<code>&lt;folder&gt;</code>中新建所需要的文件，<code>&lt;folder&gt;</code>就是你期望的网站存放的地方。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br></pre></td></tr></table></figure><p>接着我们进入<code>&lt;folder&gt;</code>，并安装依赖。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>至此，我们已经成功完成了 Hexo 的安装，并初始化了本地的 Hexo 博客。更多设置可以查看 <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo 官方文档</a></p><h2 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h2><p>之前，我们已经配置好了所需的所有东西，也成功地搭建并初始化了一个本地 Hexo 博客。但是，这个博客是本地的，别人无法访问。</p><p>现在，需要使用 GitHub Pages 搭建一个别人能够访问的 Hexo 博客了。</p><h3 id="安装-Hexo-部署插件"><a href="#安装-Hexo-部署插件" class="headerlink" title="安装 Hexo 部署插件"></a>安装 Hexo 部署插件</h3><p>由于我们是部署到 GitHub 上，所以我们需要安装的部署插件是<code>hexo-deployer-git</code>。</p><p>在我们之前的<code>&lt;folder&gt;</code>目录(即你的网站目录)下执行命令:<code>npm install hexo-deployer-git --save</code></p><h3 id="更改部署设置"><a href="#更改部署设置" class="headerlink" title="更改部署设置"></a>更改部署设置</h3><p>更改之前<code>&lt;folder&gt;</code>目录(即你的网站目录)下的<code>_config.yml</code>文件。</p><p>和部署相关的设置，默认是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type:</span><br></pre></td></tr></table></figure><p>我们需要以 Git 的方式，部署 Hexo 博客到我们的仓库<code>&lt;username/orgname&gt;.github.io</code>。</p><p>我的部署设置是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/shankangke/shankangke.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p><strong>请把<code>repo</code>参数更改为你自己的仓库地址！</strong></p><p>这里的<code>repo</code>参数可以是 HTTPS 地址，也可以是 SSH 地址。使用 HTTPS 地址需要每次输入 GitHub 的用户名和密码。使用 SSH 地址需要额外配置，但配置完成后不需要再输入 GitHub 的用户名和密码。</p><p>我这里为了安(tou)全(lan)使用的是 HTTPS 地址。</p><p>至此你已经完成了 Hexo 的部署设置，这个博客可以发布到公网了！</p><h3 id="生成和部署"><a href="#生成和部署" class="headerlink" title="生成和部署"></a>生成和部署</h3><p>使用<code>hexo generate</code>命令，生成 Hexo 博客静态文件，生成的文件保存在之前<code>&lt;folder&gt;</code>目录(即你的网站目录)下的<code>public</code>目录中。</p><p>使用<code>hexo deploy</code>命令，部署刚刚生成的 Hexo 博客静态文件。</p><p>现在你可以打开浏览器，使用域名访问你的博客啦！</p><h2 id="优化管理"><a href="#优化管理" class="headerlink" title="优化管理"></a>优化管理</h2><p>刚刚我们通过命令部署的是生成后的静态文件(即 HTML 文件)，并没有提交源文件，源文件仍只保存在本地计算机。</p><p>什么意思？</p><p>就是说一旦你的电脑故障，或者是你更换电脑了，就无法再对你原来的博客进行任何更改。</p><p>再新建一个仓库来存放源文件又有些麻烦了。所以，我使用了分支。</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>刚刚我们部署时，已经自动生成了<code>master</code>分支，我们只需要再新建一个分支用了存放源文件即可。</p><p>首先，在之前<code>&lt;folder&gt;</code>目录(即你的网站目录)的上一级目录中把刚刚的 Git 仓库克隆过来，执行<code>git clone &lt;repo&gt;</code>(把<code>&lt;repo&gt;</code>替换成你之前在配置文件中填写的 Git 仓库地址)。</p><p>克隆完毕后我们进入这个仓库目录，执行<code>cd &lt;repo_name&gt;</code>(把<code>&lt;repo_name&gt;</code>替换成你的仓库名称)。</p><p>接着，我们使用命令创建一个<code>hexo</code>分支(名字随便起，我这篇文章先按照这个分支名来写)，并切换到该分支：<code>git checkout -b hexo</code></p><p>然后，把之前<code>&lt;folder&gt;</code>目录(即你的网站目录)下的文件全部复制过来，执行命令<code>cp -r ../&lt;folder&gt;/. ./</code>。</p><p>完成后，我们就打包并提交这个分支。依次(一行一行地)执行下列命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;Set Hexo Up&quot;</span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure><p>此时，你的 Hexo 网站源文件也已经提交到了 GitHub 的远程仓库，不再受单台电脑束缚，也不用担心文件意外丢失(只要你自己不去 GitHub 的远程仓库删除)。以后对网站进行改动，直接在此进行即可，<code>&lt;folder&gt;</code>目录(即你之前的网站目录)已经可以删除。</p><h3 id="日常管理"><a href="#日常管理" class="headerlink" title="日常管理"></a>日常管理</h3><p>当你在本地对网站进行了改动(比如新建或修改文章、更改主题模板等等)，按照下列步骤来保证你的更改能始终同步到 GitHub 的远程仓库，并能将网站正确发布。</p><p>改动完成后，在<code>hexo</code>分支，依次(一行一行地)执行下列命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;Update Hexo&quot;</span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure><p>此时，你的改动已经提交到 GitHub 的远程仓库。接下来，在当前目录执行<code>hexo g -d</code>即可生成并部署网站。</p><h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><p>如果你的本地源文件不幸丢失，或者你换了一台新电脑，先确保已经达到了前文的基本配置(比如安装必要的环境软件等)，再按照下列步骤来找回你的源文件并恢复 Hexo 的正常功能。</p><p>首先，克隆仓库并切换到<code>hexo</code>分支，依次(一行一行地)执行下列命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone &lt;repo&gt;</span><br><span class="line">cd &lt;repo_name&gt;</span><br><span class="line">git checkout hexo</span><br></pre></td></tr></table></figure><p>记得把<code>&lt;repo&gt;</code>替换成你的 Git 仓库地址，把<code>&lt;repo_name&gt;</code>替换成你的 Git 仓库名称。</p><p>这时，你已经把源文件找回，下面我们来恢复 Hexo 的正常功能。</p><p>依次(一步一步地)执行下列命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure><p>至此，你的 Hexo 应该已经能够恢复使用了。尽情享受吧！</p><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>至此，正文内容已经结束，希望能够对你有所帮助！</p><p>这是我写过的最长的文章了，真的好累，终于体会到了那些大V们的不易。</p><p>如果你发现了这篇文章中存在任何错误，或者你有任何疑问、建议，都请与我取得联系。</p><p>我的邮箱地址是<a href="mailto:`shankangke@gmail.com" target="_blank" rel="noopener">`shankangke@gmail.com</a>`，期望收到你的来信，哪怕只是几句话。</p>]]></content>
    
    <summary type="html">
    
      本文详细记录了通过 Hexo + GitHub 建立这个博客的经过，文中每项操作，我都请自执行过，可以保证正确性。由于内容浅显易懂详细准确，已经可以视为教程，按照本文一步一步地操作，你也可以零成本轻松建立一个博客网站。
    
    </summary>
    
      <category term="tech" scheme="https://www.shankangke.com/categories/tech/"/>
    
    
      <category term="GitHub" scheme="https://www.shankangke.com/tags/GitHub/"/>
    
      <category term="Hexo" scheme="https://www.shankangke.com/tags/Hexo/"/>
    
      <category term="blog" scheme="https://www.shankangke.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>解决Hexo部署之后改变GitHub自定义域名Custom Domain的问题</title>
    <link href="https://www.shankangke.com/hexo-changes-custom-domain.html"/>
    <id>https://www.shankangke.com/hexo-changes-custom-domain.html</id>
    <published>2018-08-01T20:56:35.000Z</published>
    <updated>2018-08-09T03:18:52.670Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本情况"><a href="#基本情况" class="headerlink" title="基本情况"></a>基本情况</h2><p>把Hexo部署在GitHub，并且设置了自定义域名(Custom Domain)。</p><h2 id="问题概况"><a href="#问题概况" class="headerlink" title="问题概况"></a>问题概况</h2><p>每次Hexo部署完毕后，访问先前设置好的Custom Domain，都会提示404。<br>查看GitHub仓库(Repository)的设置(Settings)，发现自定义域名(Custom Domain)已经变成默认值（被清空）。</p><h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><p>查阅GitHub有关Custom Domain的文档得知：GitHub的自定义域名(Custom Domain)是通过master分支(branch)下的CNAME文件设置的。</p><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>Hexo每次部署时，会先删除分支(branch)下的所有文件，再提交生成后的文件。在删除文件时，CNAME文件也被删除，造成自定义域名(Custom Domain)变成默认值（被清空）。</p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><ol><li>设置自定义域名(Custom Domain)，观察文件变动。</li><li>使Hexo部署时模仿文件变动。</li></ol><h2 id="操作记录"><a href="#操作记录" class="headerlink" title="操作记录"></a>操作记录</h2><ol><li>在GitHub仓库(Repository)的设置(Settings)页面，设置自定义域名(Custom Domain)为<a href="http://www.shankangke.com">www.shankangke.com</a></li><li>发现master分支(branch)下新建了一个CNAME文件</li><li>查看CNAME文件内容，CNAME文件内容为先前设置的自定义域名(Custom Domain):<a href="http://www.shankangke.com">www.shankangke.com</a></li><li>在Hexo的source目录下新建一个CNAME文件，内容为自定义域名(Custom Domain):<a href="http://www.shankangke.com">www.shankangke.com</a></li><li>重新使用Hexo部署，问题解决。</li></ol>]]></content>
    
    <summary type="html">
    
      分析并解决在GitHub部署Hexo后会自动改变自定义域名Custom Domain的问题。
    
    </summary>
    
      <category term="技术" scheme="https://www.shankangke.com/categories/tech/"/>
    
    
      <category term="GitHub" scheme="https://www.shankangke.com/tags/GitHub/"/>
    
      <category term="Hexo" scheme="https://www.shankangke.com/tags/Hexo/"/>
    
      <category term="Custom Domain" scheme="https://www.shankangke.com/tags/Custom-Domain/"/>
    
  </entry>
  
  <entry>
    <title>推倒重来</title>
    <link href="https://www.shankangke.com/start-again.html"/>
    <id>https://www.shankangke.com/start-again.html</id>
    <published>2018-08-01T15:41:20.000Z</published>
    <updated>2018-08-09T03:18:52.670Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="第三方博客平台的坑"><a href="#第三方博客平台的坑" class="headerlink" title="第三方博客平台的坑"></a>第三方博客平台的坑</h3><p>最开始写博客是在第三方平台，和讯、新浪、搜狐都用过。起步阶段使用这些平台确实很方便。<br>第三方平台的优点：</p><ul><li>免费</li><li>没有技术门槛</li><li>注册账号直接开写</li><li>一键切换样式</li><li>权重高、收录快</li><li>无干扰</li></ul><p>可是时间一久，就发现在第三方平台创作十分不自由。既要防着各种奇葩敏感词，又要忍受广告，还不能完全自定义样式。<br>于是，我开始尝试自建网站。当时的我根本就没想到，这是从一个坑跳到了另一个坑……</p><h3 id="WordPress的大坑"><a href="#WordPress的大坑" class="headerlink" title="WordPress的大坑"></a>WordPress的大坑</h3><h4 id="兴奋地入坑"><a href="#兴奋地入坑" class="headerlink" title="兴奋地入坑"></a>兴奋地入坑</h4><p>我在2010年恶补了关于网站建设的知识。当时听说PHP比ASP更快、更安全，于是就选用了WordPress。<br>自建网站无比自由，完全自定义。各种功能都可以通过WordPress的插件轻松实现，WordPress也有很多好看的主题随意选择。</p><h4 id="无尽的折腾"><a href="#无尽的折腾" class="headerlink" title="无尽的折腾"></a>无尽的折腾</h4><p>可选择一多，就开始各种纠结；功能一强大，就开始各种折腾。<br>自建网站之后大部分时间都花在了选择、更改、调试、安全加固等等方面，真正用来创作的时间少之又少。<br>累了，但停不下折腾的步伐。</p><h4 id="令人眼前一亮的发现"><a href="#令人眼前一亮的发现" class="headerlink" title="令人眼前一亮的发现"></a>令人眼前一亮的发现</h4><p>最近，真的是厌烦了各种各样的折腾。就在折腾的过程中，查资料找到了几个博客，发现它们简洁、清爽、无打扰。<br>我原以为它们用的是清爽的WordPress主题，但查看源代码却找不到丝毫WordPress的痕迹。<br>我又试探性地在域名后面加上<code>/wp-admin/</code>，发现也无法打开其后台。<br>它们不是基于WordPress的网站！<br>我在其中一个博客中发现了一篇描述网站由来的文章。这网站是生成纯静态HTML页面后，托管在GitHub上的。<br>真是个惊奇地发现。我决定放弃之前的WordPress博客，推倒重来。</p><h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><h3 id="选择新坑"><a href="#选择新坑" class="headerlink" title="选择新坑"></a>选择新坑</h3><p>在我前面发现的博客中，有的是使用Jekyll生成的，有的是使用Hexo生成的。<br>又是选择……<br>我已经厌倦这种并无多大意义的纠结了。</p><h3 id="入坑Hexo-GitHub"><a href="#入坑Hexo-GitHub" class="headerlink" title="入坑Hexo+GitHub"></a>入坑Hexo+GitHub</h3><p>经过简单对比，我选择了Hexo+GitHub的组合。我内心十分清楚，又是新坑……</p><h4 id="直面Git和GitHub"><a href="#直面Git和GitHub" class="headerlink" title="直面Git和GitHub"></a>直面Git和GitHub</h4><p>作为一个“伪猿”，我很早就接触到了GitHub，但是因为对Git十分陌生，也就一直在逃避。<br>这次实在是不想折腾服务器了，就直面GitHub。<br>边看文档边捣鼓，花了2小时熟悉了Git和GitHub。<br>其实，比我想象的简单。</p><h4 id="折腾Hexo"><a href="#折腾Hexo" class="headerlink" title="折腾Hexo"></a>折腾Hexo</h4><p>这部分花的时间比较长。<br>首先是装配Node.js，在我并不熟悉地Windows 10上用命令行折腾了半天，最后还是妥协选择了msi安装。<br>接着安装Hexo和依赖、下载主题。由于忘记给Node.js的npm换源，以几KB每秒的速度，花了几小时搞完这项工作。<br>然后配置Hexo、生成、部署，又出问题。<br>网上都提到Hexo配置文件的repo要写仓库的SSH，我这样配置之后，部署时提示我应该先配置，过一会儿又说部署完成，可实际检查发现并没有部署。<br>明明已经配置了，怎么还提示需要先配置？明明已经提示部署完成，怎么实际并没有部署？<br>又查了半天，改了半天，依然无果。<br>最后我索性直接把HTTPS的URL地址填到repo，再一试，问题解决。这着实令我有些摸不着头脑。</p><h3 id="安逸"><a href="#安逸" class="headerlink" title="安逸"></a>安逸</h3><p>接下来应该不会再折腾了，也没什么需要折腾的了，而且我上高中了也就没时间折腾了。</p>]]></content>
    
    <summary type="html">
    
      放弃原来的博客，推倒重来。
    
    </summary>
    
      <category term="其他" scheme="https://www.shankangke.com/categories/others/"/>
    
    
      <category term="博客" scheme="https://www.shankangke.com/tags/blog/"/>
    
  </entry>
  
</feed>
